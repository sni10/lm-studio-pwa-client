name: Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

jobs:
  auto-version:
    if: github.ref == 'refs/heads/main' && !startsWith(github.event.head_commit.message, 'chore(release)')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Configure Git
      run: |
        git config user.name "sni10"
        git config user.email "sni10@users.noreply.github.com"
        
    - name: Determine version bump
      id: version
      run: |
        # Get the last tag or default to v1.0.0
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        echo "Last tag: $LAST_TAG"
        
        # Extract version numbers (handle v1.0.0 format)
        VERSION=${LAST_TAG#v}
        IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-1}
        MINOR=${VERSION_PARTS[1]:-0}  
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Analyze commits since last tag or since initial commit
        if [[ "$LAST_TAG" == "v1.0.0" ]] && ! git tag | grep -q "v1.0.0"; then
          # No tags exist yet, analyze all commits
          COMMITS=$(git log --oneline)
        else
          # Analyze commits since last tag
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline || git log --oneline)
        fi
        
        echo "Commits to analyze:"
        echo "$COMMITS"
        
        # Determine bump type based on commit messages
        if echo "$COMMITS" | grep -q -E "(BREAKING CHANGE|!:)"; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
          BUMP_TYPE="major"
        elif echo "$COMMITS" | grep -q -E "(^[a-f0-9]+ feat|^feat)"; then
          MINOR=$((MINOR + 1))
          PATCH=0
          BUMP_TYPE="minor"
        else
          PATCH=$((PATCH + 1))
          BUMP_TYPE="patch"
        fi
        
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "New version: $NEW_VERSION"
        echo "Bump type: $BUMP_TYPE"
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        
    - name: Update version in HTML
      run: |
        # Add version meta tag to HTML
        sed -i 's/<title>LM Studio Client<\/title>/<title>LM Studio Client<\/title>\n    <meta name="version" content="${{ steps.version.outputs.version }}">/' index.html
        
    - name: Create release commit
      run: |
        git add index.html
        git commit -m "chore(release): bump to ${{ steps.version.outputs.version }}"
        
    - name: Create and push tag
      run: |
        git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
        git push origin main
        git push origin ${{ steps.version.outputs.version }}

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies and test
      run: |
        npm install
        npm install -g http-server
        http-server . -p 8080 &
        sleep 3
        
        # Simple validation that endpoints work
        curl -f http://localhost:8080/ > /dev/null
        curl -f http://localhost:8080/tests/ > /dev/null
        echo "âœ… Endpoints validated"
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || git rev-list --max-parents=0 HEAD)
        echo "Previous tag: $PREV_TAG"
        
        # Generate changelog
        echo "## What's Changed" > CHANGELOG.md
        git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" >> CHANGELOG.md
        
        # Read changelog for release notes
        CHANGELOG_CONTENT=$(cat CHANGELOG.md)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          # LM Studio PWA Client ${{ github.ref_name }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          1. Download `index.html` 
          2. Open in your browser
          3. Configure your LM Studio server settings
          
          ## Live Demo
          
          You can try the app directly at: https://sni10.github.io/lm-studio-pwa-client/
        draft: false
        prerelease: false
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        publish_branch: gh-pages